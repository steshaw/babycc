rm -f *.o superc
cc -g -Wall --std=c99    superc.c   -o superc
cc -g -Wall --std=c99   -c -o main.o main.c
check "t=8+4" 12
expression is 't=8+4'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$8, %eax
	push	%eax
	movl	$4, %eax
	popl	%ebx
	addl	%ebx,%eax
	movl %eax, t
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
12
check "t=8-4" 4
expression is 't=8-4'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$8, %eax
	push	%eax
	movl	$4, %eax
	popl	%ebx
	subl	%ebx,%eax
	negl	%eax
	movl %eax, t
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
4
check "t=2*3" 6
expression is 't=2*3'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$2, %eax
	push	%eax
	movl	$3, %eax
	popl	%ebx
	imul	%ebx,%eax
	movl %eax, t
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
6
check "t=6/2" 3
expression is 't=6/2'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$6, %eax
	push	%eax
	movl	$2, %eax
	movl	%eax,%ebx
	popl	%eax
	cltd
	idiv	%ebx,%eax
	movl %eax, t
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
3
check "t=2+8*3" 26
expression is 't=2+8*3'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$2, %eax
	push	%eax
	movl	$8, %eax
	push	%eax
	movl	$3, %eax
	popl	%ebx
	imul	%ebx,%eax
	popl	%ebx
	addl	%ebx,%eax
	movl %eax, t
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
26
check "t=(2+8)*3" 30
expression is 't=(2+8)*3'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$2, %eax
	push	%eax
	movl	$8, %eax
	popl	%ebx
	addl	%ebx,%eax
	push	%eax
	movl	$3, %eax
	popl	%ebx
	imul	%ebx,%eax
	movl %eax, t
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
30
check "t=2*(3+4)" 14
expression is 't=2*(3+4)'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$2, %eax
	push	%eax
	movl	$3, %eax
	push	%eax
	movl	$4, %eax
	popl	%ebx
	addl	%ebx,%eax
	popl	%ebx
	imul	%ebx,%eax
	movl %eax, t
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
14
check "t=((3+4)+(5-6))/(1+2)" 2
expression is 't=((3+4)+(5-6))/(1+2)'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$3, %eax
	push	%eax
	movl	$4, %eax
	popl	%ebx
	addl	%ebx,%eax
	push	%eax
	movl	$5, %eax
	push	%eax
	movl	$6, %eax
	popl	%ebx
	subl	%ebx,%eax
	negl	%eax
	popl	%ebx
	addl	%ebx,%eax
	push	%eax
	movl	$1, %eax
	push	%eax
	movl	$2, %eax
	popl	%ebx
	addl	%ebx,%eax
	movl	%eax,%ebx
	popl	%eax
	cltd
	idiv	%ebx,%eax
	movl %eax, t
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
2
check "t=-1" -1
expression is 't=-1'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$0,%eax
	push	%eax
	movl	$1, %eax
	popl	%ebx
	subl	%ebx,%eax
	negl	%eax
	movl %eax, t
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
-1
check "t=-(5-7)" 2
expression is 't=-(5-7)'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$0,%eax
	push	%eax
	movl	$5, %eax
	push	%eax
	movl	$7, %eax
	popl	%ebx
	subl	%ebx,%eax
	negl	%eax
	popl	%ebx
	subl	%ebx,%eax
	negl	%eax
	movl %eax, t
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
2
check "t=a*b" 0
expression is 't=a*b'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	a, %eax
	push	%eax
	movl	b, %eax
	popl	%ebx
	imul	%ebx,%eax
	movl %eax, t
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
	.comm	a,4,4
	.comm	b,4,4
0
check "t=a*b-b" 0
expression is 't=a*b-b'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	a, %eax
	push	%eax
	movl	b, %eax
	popl	%ebx
	imul	%ebx,%eax
	push	%eax
	movl	b, %eax
	popl	%ebx
	subl	%ebx,%eax
	negl	%eax
	movl %eax, t
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
	.comm	a,4,4
	.comm	b,4,4
0
check "t=2*f()" 202
expression is 't=2*f()'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$2, %eax
	push	%eax
	call	f
	popl	%ebx
	imul	%ebx,%eax
	movl %eax, t
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
202
check "if 1 {t=4}" 4
expression is 'if 1 {t=4}'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$1, %eax
	je	.L1
	movl	$4, %eax
	movl %eax, t
.L1:
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
4
check "if 1 {t=4} t=5" 5
expression is 'if 1 {t=4} t=5'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$1, %eax
	je	.L1
	movl	$4, %eax
	movl %eax, t
.L1:
	movl	$5, %eax
	movl %eax, t
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
5
check "if 1 t=4 else t=5" 4
expression is 'if 1 t=4 else t=5'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$1, %eax
	je	.L1
	movl	$4, %eax
	movl %eax, t
	jmp	.L2
.L1:
	movl	$5, %eax
	movl %eax, t
.L2:
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
4
check "t=10 while (t) { t = t - 1 }" 0
expression is 't=10 while (t) { t = t - 1 }'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$10, %eax
	movl %eax, t
.L1:
	movl	t, %eax
	je	.L2
	movl	t, %eax
	push	%eax
	movl	$1, %eax
	popl	%ebx
	subl	%ebx,%eax
	negl	%eax
	movl %eax, t
	jmp	.L1
.L2:
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
0
check "t=10 do { t = t - 1 } while (t)" 0
expression is 't=10 do { t = t - 1 } while (t)'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$10, %eax
	movl %eax, t
.L1:
	movl	t, %eax
	push	%eax
	movl	$1, %eax
	popl	%ebx
	subl	%ebx,%eax
	negl	%eax
	movl %eax, t
	movl	t, %eax
	jne	.L1
.L2:
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
0
check "a=1 break b=2" 2
expression is 'a=1 break b=2'

Error: break statement not within loop (position 11).
./check: line 14: 29262 Aborted                 superc "$expression" >expression.s
check "t=10 do { break } while (t)" 10
expression is 't=10 do { break } while (t)'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$10, %eax
	movl %eax, t
.L1:
	jmp	.L2
	movl	t, %eax
	jne	.L1
.L2:
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
10
check "t=10 do { t=8 break } while (t)" 8
expression is 't=10 do { t=8 break } while (t)'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$10, %eax
	movl %eax, t
.L1:
	movl	$8, %eax
	movl %eax, t
	jmp	.L2
	movl	t, %eax
	jne	.L1
.L2:
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
8
check "t=10 while t { break } " 10
expression is 't=10 while t { break } '
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$10, %eax
	movl %eax, t
.L1:
	movl	t, %eax
	je	.L2
	jmp	.L2
	jmp	.L1
.L2:
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
10
check "t=10 while t { t=8 break } " 8
expression is 't=10 while t { t=8 break } '
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$10, %eax
	movl %eax, t
.L1:
	movl	t, %eax
	je	.L2
	movl	$8, %eax
	movl %eax, t
	jmp	.L2
	jmp	.L1
.L2:
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	t,4,4
8
