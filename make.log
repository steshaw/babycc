rm -f *.o superc
cc -Wall --std=c99    superc.c   -o superc
cc -Wall --std=c99   -c -o main.o main.c
check "8+4" 12
expression is '8+4'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$8, %eax
	push	%eax
	movl	$4, %eax
	popl	%ebx
	addl	%ebx,%eax
	pop	%ebp
	ret
	.size	expression, .-expression
12
check "8-4" 4
expression is '8-4'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$8, %eax
	push	%eax
	movl	$4, %eax
	popl	%ebx
	subl	%ebx,%eax
	negl	%eax
	pop	%ebp
	ret
	.size	expression, .-expression
4
check "2*3" 6
expression is '2*3'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$2, %eax
	push	%eax
	movl	$3, %eax
	popl	%ebx
	imul	%ebx,%eax
	pop	%ebp
	ret
	.size	expression, .-expression
6
check "6/2" 3
expression is '6/2'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$6, %eax
	push	%eax
	movl	$2, %eax
	movl	%eax,%ebx
	popl	%eax
	cltd
	idiv	%ebx,%eax
	pop	%ebp
	ret
	.size	expression, .-expression
3
check "2+8*3" 26
expression is '2+8*3'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$2, %eax
	push	%eax
	movl	$8, %eax
	push	%eax
	movl	$3, %eax
	popl	%ebx
	imul	%ebx,%eax
	popl	%ebx
	addl	%ebx,%eax
	pop	%ebp
	ret
	.size	expression, .-expression
26
check "(2+8)*3" 30
expression is '(2+8)*3'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$2, %eax
	push	%eax
	movl	$8, %eax
	popl	%ebx
	addl	%ebx,%eax
	push	%eax
	movl	$3, %eax
	popl	%ebx
	imul	%ebx,%eax
	pop	%ebp
	ret
	.size	expression, .-expression
30
check "2*(3+4)" 14
expression is '2*(3+4)'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$2, %eax
	push	%eax
	movl	$3, %eax
	push	%eax
	movl	$4, %eax
	popl	%ebx
	addl	%ebx,%eax
	popl	%ebx
	imul	%ebx,%eax
	pop	%ebp
	ret
	.size	expression, .-expression
14
check "((3+4)+(5-6))/(1+2)" 2
expression is '((3+4)+(5-6))/(1+2)'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$3, %eax
	push	%eax
	movl	$4, %eax
	popl	%ebx
	addl	%ebx,%eax
	push	%eax
	movl	$5, %eax
	push	%eax
	movl	$6, %eax
	popl	%ebx
	subl	%ebx,%eax
	negl	%eax
	popl	%ebx
	addl	%ebx,%eax
	push	%eax
	movl	$1, %eax
	push	%eax
	movl	$2, %eax
	popl	%ebx
	addl	%ebx,%eax
	movl	%eax,%ebx
	popl	%eax
	cltd
	idiv	%ebx,%eax
	pop	%ebp
	ret
	.size	expression, .-expression
2
check "-1" -1
expression is '-1'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$0,%eax
	push	%eax
	movl	$1, %eax
	popl	%ebx
	subl	%ebx,%eax
	negl	%eax
	pop	%ebp
	ret
	.size	expression, .-expression
-1
check "-(5-7)" 2
expression is '-(5-7)'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$0,%eax
	push	%eax
	movl	$5, %eax
	push	%eax
	movl	$7, %eax
	popl	%ebx
	subl	%ebx,%eax
	negl	%eax
	popl	%ebx
	subl	%ebx,%eax
	negl	%eax
	pop	%ebp
	ret
	.size	expression, .-expression
2
check "a*b" 0
expression is 'a*b'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	a, %eax
	push	%eax
	movl	b, %eax
	popl	%ebx
	imul	%ebx,%eax
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	a,4,4
	.comm	b,4,4
0
check "a*b-b" 0
expression is 'a*b-b'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	a, %eax
	push	%eax
	movl	b, %eax
	popl	%ebx
	imul	%ebx,%eax
	push	%eax
	movl	b, %eax
	popl	%ebx
	subl	%ebx,%eax
	negl	%eax
	pop	%ebp
	ret
	.size	expression, .-expression
	.comm	a,4,4
	.comm	b,4,4
0
check "2*f()" 202
expression is '2*f()'
.globl expression
	.type	expression, @function
expression:
	pushl	%ebp
	movl	%esp, %ebp
	movl	$2, %eax
	push	%eax
	call	f
	popl	%ebx
	imul	%ebx,%eax
	pop	%ebp
	ret
	.size	expression, .-expression
202
